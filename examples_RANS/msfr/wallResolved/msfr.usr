c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "experimental/rans_komg.f"
      include "experimental/rans_wallfunctions.f"
      include "experimental/utilities.f"
      include "experimental/limits.f"
      include "experimental/lineplot.f"      
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'RANS_KOMG'

      integer e
      e = gllel(eg)

      Pr_t=coeffs(1)
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
      elseif(ifield.eq.2) then !temperature
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then !tke
        udiff = cpfld(1,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then !tau
        udiff = cpfld(1,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      qvol   = 0.0
      avol   = 0.0
      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'SPLINE'
c
      integer ix,iy,iz,iside,e,eg
      
      real upin,kpin,taupin,ypin

      integer icalld
      save icalld
      data icalld /0/
      
      if(icalld.eq.0)then
         call getInletProf
         icalld = 1
      endif
      
      e = gllel(eg)
     
c     inlet conditions
      if(cbc(iside,e,1).eq.'v  ')then
         ypin = ym1(ix,iy,iz,e)-1.935
         if(ypin.lt.0.0)ypin = 0.0
         if(ypin.gt.0.235)ypin = 0.235
         call initprof(ypin,upin,kpin,taupin)
         if(ifield.eq.1)then
            ux = upin
            uy = 0.0
            uz = 0.0
         elseif(ifield.eq.3)then
            temp = kpin 
         elseif(ifield.eq.4)then
            temp = taupin 
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      e = gllel(eg)

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
C      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
      real m1

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)
      real norm(3),pt(3),eps,planar_ave_m1,umean
      real pta(3),ptb(3)

      norm(1) = 1.0
      norm(2) = 0.0
      norm(3) = 0.0
      pt(1) = 0.0
      pt(2) = 0.0
      pt(3) = 0.0
      eps = 0.02

      nxyz = lx1*ly1*lz1
      ntot = nxyz*nelt

      if(mod(istep,100).eq.0) then
        call print_limits
        call y_p_limits(wd,.true.)
        umean=planar_ave_m1(vx,norm,pt,eps)
        if(nio.eq.0) then
          write(6,'(a15,es13.4)') "umean:",umean
          write(6,*)
        endif
      endif

Cc turbulent outflow bc
      rq  = 4.
      uin = 0.
      call turb_outflow(d,m1,rq,uin)

      if(istep.eq.nsteps)then
         call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
         pta(1) = -0.5
         pta(2) = 1.935
         pta(3) = 0.
         ptb(1) = -0.5
         ptb(2) = 2.17
         ptb(3) = 0.
         call lineplot(pta,ptb,1001)

         pta(1) = -0.94
         pta(2) = 0.5
         pta(3) = 0.
         ptb(1) = 0.94
         ptb(2) = 0.5
         ptb(3) = 0.
         call lineplot(pta,ptb,1001)

         pta(1) = 0.5
         pta(2) = 1.935
         pta(3) = 0.
         ptb(1) = 0.5
         ptb(2) = 2.17
         ptb(3) = 0.
         call lineplot(pta,ptb,1001)

         pta(1) = 0.0
         pta(2) = 0.0
         pta(3) = 0.
         ptb(1) = 0.0
         ptb(2) = 1.054
         ptb(3) = 0.
         call lineplot(pta,ptb,1001)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      integer iel, ifc, id_face
      integer i, e, f, n

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      common /rans_usr/ ifld_k, ifld_omega, m_id
      integer ifld_k,ifld_omega, m_id

      integer w_id
      real coeffs(30) !array for passing your own coeffs
      logical ifcoeffs
      
      ntot = nx1*ny1*nz1*nelt

c     Assign BCs
      do iel=1,nelt
      do ifc=1,2*ndim
         id_face = bc(5,ifc,iel,1)
         if (id_face.eq.1) then         ! inlet 
             cbc(ifc,iel,1) = 'v  '
         elseif (id_face.eq.2) then     ! outlet 
             cbc(ifc,iel,1) = 'O  '
         elseif (id_face.eq.3) then     ! wall 
             cbc(ifc,iel,1) = 'W  '
         elseif (id_face.eq.4) then     ! centerline (axisymmetric) 
             cbc(ifc,iel,1) = 'A  '
         endif
      enddo
      enddo

C     initialize the RANS model
      ifld_k = 3 !address of tke
      ifld_omega = 4 !address of tau
      ifcoeffs = .false.

C     Supported models:
c     m_id = 0 !regularized high-Re k-omega (no wall functions)
c     m_id = 1 !regularized low-Re k-omega
c     m_id = 2 !regularized high-Re k-omega SST (no wall functions)
c     m_id = 3 !regularized low-Re k-omega SST
      m_id = 4 !standard k-tau

C     Wall distance function:
c     use w_id = 2 for wallfunctions
c     w_id = 0 ! user specified
c     w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      w_id = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_omega,ifcoeffs,coeffs,w_id,wd,m_id)      
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      call count_boundaries

      return
      end
c-----------------------------------------------------------------------
      subroutine initprof(y,Uin,Kin,Oin)
c
c Compute temperature + species using cubic splines
c   f(y) = s(i) + sb(i)*(y-SYY(i)) + sc(i)*(y-SYY(i))**2 + sd(i)*(y-SYY(i))**3

      include 'SPLINE'

      real y, Uin, Kin, Oin

      ii = 0
      do i=1,npts-1
        if (y.ge.SYY(i) .and. y.lt.SYY(i+1)) ii=i
      enddo
      if(abs(y-SYY(npts)).lt.1e-7) ii=npts

      if (ii.le.0) then
        write(*,*) 'Error in init_mean: ii= ', ii,'>npts=', npts, y
        call exitt
      endif

      Uin=fU(ii) + sbU(ii)*(y-SYY(ii))
     *     +scU(ii)*(y-SYY(ii))**2+sdU(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Uin=fU(npts)

      Kin=fK(ii) + sbK(ii)*(y-SYY(ii))
     *     +scK(ii)*(y-SYY(ii))**2+sdK(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Kin=fK(npts)

      Oin=fO(ii) + sbO(ii)*(y-SYY(ii))
     *     +scO(ii)*(y-SYY(ii))**2+sdO(ii)*(y-SYY(ii))**3

      if (y.ge.SYY(npts)) Oin=fO(npts)

      return
      end
      
c---------------------------------------------------------------------
      subroutine getInletProf

      include 'SPLINE'

      real YY(npts),ZZ(npts)

      if (nid.eq.0) then
         write(*,'(A,I4)')      'npts  = ', npts
         write(*,'(A,1pE10.2)') 'ymin = ', ymin
         write(*,'(A,1pE10.2)') 'ymax = ', ymax
         write(*,'(A,1pE10.2)') 'ymin_turb = ', ymin_turb
         write(*,'(A,1pE10.2)') 'ymax_turb = ', ymax_turb
      endif

C  Read in the 1-D profile computed by turbChan2D
C        velocity       in fU
C        kinetic energy in fK
C        omega          in fO

      open(unit=100,file='InletProf_Re40k.dat',status='old')
      read(100, *)     ! skip the header
      do i=1,npts
        read(100,*)  YY(i), fU(i), fK(i), fO(i)
c        write(*,*)  YY(i), fU(i), fK(i), fO(i)
      enddo
      close(100)

C  compute spline coefficients for U
      do i=1,npts
        ZZ(i)  = fU(i)
        SYY(i) = YY(i)
      enddo
      call spline (npts, YY, ZZ, sbU, scU, sdU)

C  compute spline coefficients for T
      do i=1,npts
        ZZ(i) = fK(i)
      enddo
      call spline (npts, YY, ZZ, sbK, scK, sdK)

C  compute spline coefficients for species mass fractions
      do i=1,npts
        ZZ(i) = fO(i)
      enddo
      call spline (npts, YY, ZZ, sbO, scO, sdO)

      return
      end

c-----------------------------------------------------------------------
      subroutine spline (n, x, y, b, c, d)

c  the coefficients b(i), c(i), and d(i), i=1,2,...,n are computed
c  for a cubic interpolating spline
c
c    s(x) = y(i) + b(i)*(x-x(i)) + c(i)*(x-x(i))**2 + d(i)*(x-x(i))**3
c
c    for  x(i) .le. x .le. x(i+1)
c
c  input.. 
c
c    n = the number of data points or knots (n.ge.2)
c    x = the abscissas of the knots in strictly increasing order
c    y = the ordinates of the knots
c
c  output..
c
c    b, c, d  = arrays of spline coefficients as defined above.
c
c  using  p  to denote differentiation,
c
c    y(i) = s(x(i))
c    b(i) = sp(x(i))
c    c(i) = spp(x(i))/2
c    d(i) = sppp(x(i))/6  (derivative from the right)
c
c  the accompanying function subprogram  seval  can be used
c  to evaluate the spline.

      integer n
      real x(n), y(n), b(n), c(n), d(n)

      integer nm1, ib, i
      real t

C      do i = 1, n
C        if (nid.eq.0) write(41,'(1p2E13.5)') x(i), y(i)
C      enddo
C      if (nid.eq.0) write(41,'(A)') '&'

      nm1 = n-1
      if ( n .lt. 2 ) return
      if ( n .lt. 3 ) go to 50

c  set up tridiagonal system
c  b = diagonal, d = offdiagonal, c = right hand side.

      d(1) = x(2) - x(1)
      c(2) = (y(2) - y(1))/d(1)
      do 10 i = 2, nm1
         d(i) = x(i+1) - x(i)
         b(i) = 2.*(d(i-1) + d(i))
         c(i+1) = (y(i+1) - y(i))/d(i)
         c(i) = c(i+1) - c(i)
   10 continue

c  end conditions.  third derivatives at  x(1)  and  x(n)
c  obtained from divided differences

      b(1) = -d(1)
      b(n) = -d(n-1)
      c(1) = 0.0
      c(n) = 0.0
      if ( n .eq. 3 ) go to 15
      c(1) = c(3)/(x(4)-x(2)) - c(2)/(x(3)-x(1))
      c(n) = c(n-1)/(x(n)-x(n-2)) - c(n-2)/(x(n-1)-x(n-3))
      c(1) = c(1)*d(1)**2/(x(4)-x(1))
      c(n) = -c(n)*d(n-1)**2/(x(n)-x(n-3))

c  forward elimination

   15 do 20 i = 2, n
         t = d(i-1)/b(i-1)
         b(i) = b(i) - t*d(i-1)
         c(i) = c(i) - t*c(i-1)
   20 continue

c  back substitution

      c(n) = c(n)/b(n)
      do 30 ib = 1, nm1
         i = n-ib
         c(i) = (c(i) - d(i)*c(i+1))/b(i)
   30 continue

c  c(i) is now the sigma(i) of the text
c
c  compute polynomial coefficients

      b(n) = (y(n) - y(nm1))/d(nm1) + d(nm1)*(c(nm1) + 2.*c(n))
      do 40 i = 1, nm1
         b(i) = (y(i+1) - y(i))/d(i) - d(i)*(c(i+1) + 2.*c(i))
         d(i) = (c(i+1) - c(i))/d(i)
         c(i) = 3.*c(i)
   40 continue
      c(n) = 3.0*c(n)
      d(n) = d(n-1)
      return

   50 b(1) = (y(2)-y(1))/(x(2)-x(1))
      c(1) = 0.0
      d(1) = 0.0
      b(2) = b(1)
      c(2) = 0.0
      d(2) = 0.0

      return
      end
